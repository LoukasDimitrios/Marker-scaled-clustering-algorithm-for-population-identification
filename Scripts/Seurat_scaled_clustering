# Identify columns with empty names
empty_col_indices <- which(colnames(expr_sub_exp) == "")

# Rename empty columns
colnames(expr_sub_exp)[empty_col_indices] <- c("V22", "V23", "V30")

# Make the column names unique
colnames(expr_sub_exp) <- make.unique(colnames(expr_sub_exp), sep = ".")

matrix_data <- as.matrix(expr_sub_exp)
matrix_data <- t(matrix_data)

# Convert the matrix to a dgCMatrix
dgCMatrix_data <- as(matrix_data, "dgCMatrix")
data <- CreateSeuratObject(counts = dgCMatrix_data)

data <- NormalizeData(data)
data <- ScaleData(data)
data <- FindVariableFeatures(data, nfeatures = 55)

data <- RunPCA(data, npcs = 55)


# Given factor
best_algorithm_scaled <- factor("slm", levels = c("louvain", "leiden", "slm"))

# Get the integer code for the factor level
best_algorithm_scaled <- as.numeric(best_algorithm_scaled)

data <- FindNeighbors(data, compute.SNN = TRUE, dims = 1:best_p_scaled, k.param = best_k_neighbors_scaled)
data <- FindClusters(data, resolution = best_resolution_scaled, algorithm = best_algorithm_scaled)

# Get PCA from Seurat object
selected_pcs <- data@reductions$pca@cell.embeddings[,1:best_p_scaled]

# Get cluster assignments from Seurat
cluster_assignments <- data@meta.data$seurat_clusters

umap_result <- umap(selected_pcs, batch = TRUE, n_threads = 32, verbose = FALSE, n_neighbors = 15, n_sgd_threads = "auto")

  # SEURAT CLUSTERS - PLOT
  umap_data_clusters <- data.frame(V1 = umap_result[, 1], V2 = umap_result[, 2], Cluster = factor(cluster_assignments))
  umap_plot_clusters <- ggplot(umap_data_clusters, aes(x = V1, y = V2, color = Cluster)) +
    geom_point() +
    guides(color = guide_legend(override.aes = list(size = 4))) +
    theme_minimal()

  # POPULATION - PLOT
  umap_data_population <- data.frame(V1 = umap_result[, 1], V2 = umap_result[, 2])
  umap_data_population$pops_sub <- pops_sub
  umap_plot_population <- ggplot(umap_data_population, aes(x = V1, y = V2, color = pops_sub)) +
    geom_point() +
    guides(color = guide_legend(override.aes = list(size = 4))) +
    theme_minimal()

  
  print(umap_plot_population)
  print(umap_plot_clusters)
